package android.example.com.popularmovies;

import android.example.com.popularmovies.data.MoviesLoader;
import android.example.com.popularmovies.models.Movie;
import android.example.com.popularmovies.utils.MessageEvent;
import android.example.com.popularmovies.utils.UriMaker;
import android.os.Parcelable;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity
        implements LoaderManager.LoaderCallbacks<List<Movie>>{


    // Useful information
    // https://medium.com/@cassioso/a-strategy-to-secure-your-api-keys-using-gradle-b9c107272860
    // https://developers.themoviedb.org/3/discover/movie-discover ... sort_by ... popularity !
    // https://futurestud.io/tutorials/glide-placeholders-fade-animations

    /**
     * Requires a file named keystore.properties to exist within the project root
     * having the following content
     * TmbdApiKey="INSERT YOUR API KEY HERE"
     * */

    private static final String MOVIES_LIST = "movies";
    private static final String URI_KEY = "Uri";

    private static final int MOVIES_LOADER_ID = 1;
    private List<Movie> movies = new ArrayList<>();

    private EditText searchField;
    private ImageView imageViewSearch;
    private ProgressBar loadingIndicator;
    private TextView emptyText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        prepareLoader();


    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putParcelableArrayList(MOVIES_LIST, new ArrayList<Parcelable>(movies));
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        movies = savedInstanceState.getParcelableArrayList(MOVIES_LIST);

    }
    private String getApiTestResponse() {
        if (BuildConfig.TMDB_API_KEY == null)
        {
            Toast.makeText(this, "This App requires an API-key", Toast.LENGTH_SHORT).show();
            return null;
        }
        return UriMaker.getTestUrl();
    }


    private void prepareLoader() {
        Bundle args = new Bundle();
        args.putString(URI_KEY, getApiTestResponse());

        LoaderManager loaderManager = getSupportLoaderManager();
        loaderManager.initLoader(MOVIES_LOADER_ID, args, MainActivity.this);
        if (loaderManager.getLoader(MOVIES_LOADER_ID).isStarted())
            loaderManager.restartLoader(MOVIES_LOADER_ID, args, MainActivity.this);
    }



    // region GreenRobot EventBus Setup.
    // Why ? To inform the user when something goes wrong in the loader running on a separate thread
    @Override
    public void onStart() {
        super.onStart();
        EventBus.getDefault().register(this);
    }

    @Override
    public void onStop() {
        EventBus.getDefault().unregister(this);
        super.onStop();
    }

    // This method will be called when a MessageEvent is posted (in the UI thread for Toast)
    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(MessageEvent event) {
        Toast.makeText(MainActivity.this, event.message, Toast.LENGTH_SHORT).show();
    }
    // endregion

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<List<Movie>> onCreateLoader(int id, Bundle args) {
        if (args.isEmpty())
            return null;
        //loadingIndicator.setVisibility(View.VISIBLE);
        return new MoviesLoader(MainActivity.this, args.getString(URI_KEY));
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<List<Movie>> loader, List<Movie> data) {
        //loadingIndicator.setVisibility(View.GONE);
        if (data == null || data.isEmpty()) {
            movies.clear();
            //emptyText.setText("No records found");
        }
        else {
            movies = data;
            //prepareRecyclerView();
        }
        //adapter.notifyDataSetChanged();
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<List<Movie>> loader) {

    }

}
